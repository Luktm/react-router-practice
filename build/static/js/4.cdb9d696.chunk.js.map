{"version":3,"sources":["components/quotes/HighlightedQuote.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.js","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","pages/QuoteDetail.js"],"names":["module","exports","HighlightedQuote","props","className","classes","quote","text","author","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","quoteId","useEffect","form","onSubmit","event","preventDefault","enteredText","current","value","commentData","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuotes","path","exact","to","url"],"mappings":"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","file":"static/js/4.cdb9d696.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useRef, useEffect } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../repository/quote-repository';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment, quoteId } = props;\n\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      onAddedComment();\n    }\n    return () => {\n    }\n  }, [status, error, onAddedComment])\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n\n    // optional: Could validate here\n\n    sendRequest({ commentData: enteredText, quoteId: quoteId });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (\n        <div className='centered'>\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from 'react';\nimport { Route, useRouteMatch, useParams } from 'react-router-dom';\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../repository/quote-repository';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentList from '../comments/CommentsList';\n\nconst Comments = (props) => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n\n  const { quoteId } = params;\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId); // fetch all comment again\n  }, [quoteId, sendRequest]);\n\n  let comments;\n\n  if (status === 'pending') {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  };\n\n  if (status === 'completed' && loadedComments && loadedComments.length > 0) {\n    comments = <CommentList comments={loadedComments} />;\n  }\n\n  if (status === 'completed' && (!loadedComments || loadedComments.length === 0)) {\n    comments = <p className=\"centered\">No comments were added yet!</p>\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {/* match.path => /quotes/:quoteId/comment */}\n      {/* match.url => /quotes/q2/comment */}\n      {isAddingComment && <NewCommentForm quoteId={quoteId} onAddedComment={addedCommentHandler} />}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import React, { Component, Fragment, useEffect } from 'react';\nimport { useParams, Route, useRouteMatch, Switch, Link } from 'react-router-dom';\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\nimport Comments from '../components/comments/Comments';\nimport useHttp from '../hooks/use-http';\nimport { getSingleQuote } from '../repository/quote-repository';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\n\n\nconst QuoteDetail = (props) => {\n\n    let match = useRouteMatch()\n    const params = useParams();\n\n    const { quoteId } = params;\n\n    const { sendRequest, status, data: loadedQuotes, error } = useHttp(getSingleQuote);\n\n    useEffect(() => {\n        sendRequest(quoteId);\n    }, [sendRequest, quoteId])\n\n\n    if (status === 'pending') {\n        return (\n            <div className=\"centered\">\n                <LoadingSpinner />\n            </div>\n        );\n    }\n\n    // fallback, if user simply type the :quoteId\n    if (error) {\n        return (\n            <p className=\"centered\">{error}</p>\n        );\n    };\n\n    if (!loadedQuotes) {\n        return <p>No Quote found!</p>\n    }\n\n    return (\n        <Fragment>\n            <HighlightedQuote text={loadedQuotes.text} author={loadedQuotes.author} />\n            <Route path={match.path} exact>\n                <div className=\"centered\">\n                    <Link className=\"btn--flat\" to={`${match.url}/comments`}>Load Comments</Link>\n                </div>\n            </Route>\n            <Route path={`${match.path}/comments`}>\n                <Comments />\n            </Route>\n        </Fragment>\n    );\n}\n\nexport default QuoteDetail;"],"sourceRoot":""}