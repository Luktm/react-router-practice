{"version":3,"sources":["components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/quotes/NoQuotesFound.js","pages/AllQuotes.js"],"names":["module","exports","QuoteItem","props","match","useRouteMatch","className","classes","item","text","author","to","url","id","QuoteList","quotes","ascending","history","useHistory","location","useLocation","isSortingAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","sorting","onClick","push","pathname","list","map","quote","NoQuotesFound","noquotes","QuoteDetail","React","lazy","AllQuote","useHttp","getAllQuotes","sendRequest","status","loadedQuotes","data","error","console","log","useEffect","LoadingSpinner","length","path"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,mBCA3DD,EAAOC,QAAU,CAAC,SAAW,kC,iGCuBdC,EArBG,SAACC,GACjB,IAAMC,EAAQC,cAEd,OACE,qBAAIC,UAAWC,IAAQC,KAAvB,UACE,mCACE,qCACE,4BAAIL,EAAMM,SAEZ,qCAAaN,EAAMO,YAKrB,cAAC,IAAD,CAAMC,GAAE,UAAKP,EAAMQ,IAAX,YAAkBT,EAAMU,IAAMP,UAAU,MAAhD,iC,iBCuDSQ,EAxDG,SAACX,GAGjB,IAbkBY,EAAQC,EAapBC,EAAUC,cAEVC,EAAWC,cAiBXC,EAAiD,QAJnC,IAAIC,gBAAgBH,EAASI,QAIVC,IAAI,QAErCC,GAlCYV,EAkCcZ,EAAMY,OAlCZC,EAkCoBK,EAjCvCN,EAAOW,MAAK,SAACC,EAAQC,GAC1B,OAAIZ,EACKW,EAAOd,GAAKe,EAAOf,GAAK,GAAK,EAE7Bc,EAAOd,GAAKe,EAAOf,GAAK,GAAK,MA0CxC,OACE,eAAC,WAAD,WACE,qBAAKP,UAAWC,IAAQsB,QAAxB,SACE,yBAAQC,QAde,WAE3Bb,EAAQc,KAAK,CACXC,SAAUb,EAASa,SACnBT,OAAO,SAAD,OAAYF,EAAqB,OAAS,UAU9C,kBAA6CA,EAAqB,YAAc,iBAElF,oBAAIf,UAAWC,IAAQ0B,KAAvB,SACGR,EAAaS,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAEEtB,GAAIsB,EAAMtB,GACVH,OAAQyB,EAAMzB,OACdD,KAAM0B,EAAM1B,MAHP0B,EAAMtB,a,yCC/CRuB,EAXO,WACpB,OACE,sBAAK9B,UAAWC,IAAQ8B,SAAxB,UACE,iDACA,cAAC,IAAD,CAAM1B,GAAG,aAAaL,UAAU,MAAhC,6BCCAgC,EAAcC,IAAMC,MAAK,kBAAM,gCAoDtBC,UAlDE,SAACtC,GAEd,IAAMC,EAAQC,cAEd,EAA2DqC,YAAQC,KAA3DC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAcC,EAAnC,EAA6BC,KAAoBC,EAAjD,EAAiDA,MAYjD,OAVAC,QAAQC,IAAI,CAAEJ,iBAKdK,qBAAU,WACNF,QAAQC,IAAI,qBACZN,MACD,CAACA,IAEW,YAAXC,GAAyC,OAAjBC,EAEpB,qBAAKxC,UAAU,WAAf,SACI,cAAC8C,EAAA,EAAD,MAKRJ,EAEI,mBAAG1C,UAAU,mBAAb,SACK0C,IAKE,cAAXH,GAA4BC,GAAwC,IAAxBA,EAAaO,OAKzD,cAAC,WAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAI,UAAKlD,EAAMkD,KAAX,aAAX,SACI,cAAChB,EAAD,MAEJ,cAAC,IAAD,CAAOgB,KAAMlD,EAAMkD,KAAnB,SACI,cAAC,EAAD,CAAWvC,OAAQ+B,WAVxB,cAAC,EAAD","file":"static/js/5.985dbfab.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__2dOvb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__3pzcl\",\"sorting\":\"QuoteList_sorting__rL6H1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__3DIYb\"};","import { Link, useRouteMatch } from 'react-router-dom';\nimport classes from './QuoteItem.module.css';\n\nconst QuoteItem = (props) => {\n  const match = useRouteMatch();\n    \n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      {/* match.url => /quotes */}\n      {/* props.id => :quoteId */}\n      {/* route to /quotes/:quoteId */}\n      <Link to={`${match.url}/${props.id}`} className='btn'>\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { Fragment } from 'react';\n// useHistory allow use change page\nimport { useHistory, useLocation } from 'react-router-dom';\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n  \n  // navigator.push()\n  const history = useHistory();\n  // useLocation() give us access to a location object which has information about currently loaded URL\n  const location = useLocation();\n\n  /**\n * {pathname: \"/quotes\", search: \"?sort=asc\", hash: \"\", state: undefined, key: \"suvd5k\"}\n */\n  // console.log({location});\n\n  /**\n   * build in browser class extract current ?sort= query parameter by key,\n   * queryParams has \"search: \"?sort=asc\"\n   * example: https://stackoverflow.com/questions/48606857/how-to-read-all-url-params-using-js?answertab=votes#tab-top\n   * \n   */\n  const queryParams = new URLSearchParams(location.search);\n  // console.log({\"queryParams\": queryParams.getAll('sort')}); // return ['sort']\n\n  // bcuz current param has \"search: \"?sort=asc\", isSortingAscending will store \"asc\" value\n  const isSortingAscending = queryParams.get('sort') === 'asc';\n\n  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\n\n  const changeSortingHandler = () => {\n    // alternative way and concise way, push will re-render the code!!\n    history.push({\n      pathname: location.pathname,\n      search: `?sort=${(isSortingAscending ? 'desc' : 'asc')}`\n    });\n    \n    // // push this page render component even we were at the current page\n    // history.push(`${location.pathname}?sort=${(isSortingAscending ? 'desc' : 'asc')}`);\n  };\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}>Sort {isSortingAscending ? 'Decending' : 'Ascending'}</button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import { Link } from 'react-router-dom';\nimport classes from './NoQuotesFound.module.css';\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link to='/new-quote' className='btn'>\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import React, { useEffect, Fragment } from 'react';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\nimport QuoteList from '../components/quotes/QuoteList';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\nimport useHttp from '../hooks/use-http';\nimport { getAllQuotes } from '../repository/quote-repository';\nimport NoQuotesFound from '../components/quotes/NoQuotesFound';\n\nconst QuoteDetail = React.lazy(() => import('../pages/QuoteDetail'));\n\nconst AllQuote = (props) => {\n\n    const match = useRouteMatch();\n\n    const { sendRequest, status, data: loadedQuotes, error } = useHttp(getAllQuotes);\n\n    console.log({ loadedQuotes });\n\n    /**\n     * this always run initially\n     */\n    useEffect(() => {\n        console.log('ALL QUOTE RUNNING');\n        sendRequest();\n    }, [sendRequest]);\n\n    if (status === 'pending' || loadedQuotes === null) {\n        return (\n            <div className=\"centered\">\n                <LoadingSpinner />\n            </div>\n        );\n    };\n\n    if (error) {\n        return (\n            <p className=\"centered focused\">\n                {error}\n            </p>\n        );\n    };\n\n    if (status === 'completed' && (!loadedQuotes || loadedQuotes.length === 0)) {\n        return <NoQuotesFound />\n    }\n\n    return (\n        <Fragment>\n            <Switch>\n                <Route path={`${match.path}/:quoteId`}>\n                    <QuoteDetail />\n                </Route>\n                <Route path={match.path} >\n                    <QuoteList quotes={loadedQuotes} />\n                </Route>\n            </Switch>\n        </Fragment>\n    );\n}\n\nexport default AllQuote;"],"sourceRoot":""}