{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","useState","isEntering","setIsEntering","authorInputRef","useRef","textInputRef","when","message","location","onFocus","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","NewQuote","useHttp","addQuote","sendRequest","status","history","useHistory","useEffect","push","addQuoteHandler","quoteData","a","console","log"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,kHCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,yBC6D/BC,EAzDG,SAACL,GACjB,MAAoCM,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAEMC,EAAiBC,mBACjBC,EAAeD,mBAqBrB,OACE,eAAC,WAAD,WAEE,cAAC,IAAD,CACEE,KAAML,EACNM,QAAS,SAACC,GAAD,MAAc,uEAEzB,cAAC,EAAD,UACE,uBAAMC,QAhBa,WACvBP,GAAc,IAeuBP,UAAWC,IAAQc,KAAMC,SA3BhE,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBX,EAAeY,QAAQC,MACvCC,EAAcZ,EAAaU,QAAQC,MAIzCtB,EAAMwB,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,KAmB5C,UACGvB,EAAM2B,WACL,qBAAK1B,UAAWC,IAAQ0B,QAAxB,SACE,cAACC,EAAA,EAAD,MAIJ,sBAAK5B,UAAWC,IAAQ4B,QAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAKzB,OAEtC,sBAAKR,UAAWC,IAAQ4B,QAAxB,UACE,uBAAOC,QAAQ,OAAf,kBACA,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKvB,OAEpC,qBAAKV,UAAWC,IAAQkC,QAAxB,SACE,wBAAQC,QA5BY,WAC5B7B,GAAc,IA2BkCP,UAAU,MAAlD,kC,gBCfGqC,UAnCE,SAACtC,GAMd,MAAgCuC,YAAQC,KAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAMfC,EAAUC,cAGhBC,qBAAU,WACS,cAAXH,GACAC,EAAQG,KAAK,aAElB,CAACJ,EAAQC,IAEZ,IAAMI,EAAe,uCAAG,WAAOC,GAAP,SAAAC,EAAA,6DACpBC,QAAQC,IAAIH,GADQ,SAGdP,EAAYO,GAHE,OAMpBL,EAAQG,KAAK,WANO,2CAAH,sDASrB,OACI,cAAC,EAAD,CAAWnB,UAAsB,YAAXe,EAAsBlB,WAAYuB","file":"static/js/6.4ac06aac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1m44e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3Ndw9\",\"loading\":\"QuoteForm_loading__iDpS0\",\"control\":\"QuoteForm_control__2lCiE\",\"actions\":\"QuoteForm_actions__354La\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { Fragment, useRef, useState } from 'react';\n// prompt user if want to leave\nimport { Prompt } from 'react-router-dom';\nimport Card from '../UI/Card';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\n\nconst QuoteForm = (props) => {\n  const [isEntering, setIsEntering] = useState(false);\n\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  const formFocusHandler = () => {\n    setIsEntering(true);\n  };\n\n  const finishEnteringHandler = () => {\n    setIsEntering(false);\n  }\n  \n  return (\n    <Fragment>\n      {/* prompt use when form was focused */}\n      <Prompt \n        when={isEntering} \n        message={(location) => 'Are you sure yo want to leave? All your entered data will be lost'} \n      />\n      <Card>\n        <form onFocus={formFocusHandler} className={classes.form} onSubmit={submitFormHandler}>\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor='author'>Author</label>\n            <input type='text' id='author' ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor='text'>Text</label>\n            <textarea id='text' rows='5' ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button onClick={finishEnteringHandler} className='btn'>Add Quote</button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport QuoteForm from '../components/quotes/QuoteForm';\nimport useHttp from '../hooks/use-http';\nimport { addQuote } from '../repository/quote-repository';\n\nconst NewQuote = (props) => {\n\n    // * inside has state reducer, if it get update, the component will re-render\n    // addQuote is a function, sendRequest is a function,\n    // * trigger useHttp function, return the sendRequest without trigger it,\n    // * then sendRequest(form_object) trigger, then trigger addQuote(form_object)\n    const { sendRequest, status } = useHttp(addQuote);\n\n    /**\n     * * useHistory is programmatic navigation, when use finish certain action, navigate away the page\n     * * tell React Router that we wanna switch pages\n     */\n    const history = useHistory(); // it change the browser history\n\n    // * dispatch reducer state change in useHttp, useEffect will call\n    useEffect(() => {\n        if (status === 'completed') {\n            history.push('/quotes')\n        }\n    }, [status, history]);\n\n    const addQuoteHandler = async (quoteData) => {\n        console.log(quoteData);\n\n        await sendRequest(quoteData);\n\n        // * like Navigator.push() and Navigator.replace() in flutter\n        history.push('/quotes');\n    };\n\n    return (\n        <QuoteForm isLoading={status === 'pending'} onAddQuote={addQuoteHandler} />\n    );\n}\n\nexport default NewQuote;"],"sourceRoot":""}